{"version":3,"sources":["images/tetris.jpg","components/QuestionCard.styles.tsx","components/QuestionCard.tsx","API.ts","utils.ts","App.styles.tsx","App.tsx","index.tsx"],"names":["module","exports","Wrapper","styled","div","ButtonWrapper","correct","userClick","QuestionCard","Difficulty","question","answers","callback","userAnswer","questionNum","totalQuestions","className","dangerouslySetInnerHTML","__html","map","answer","key","correctAnswer","disabled","onClick","value","fetchQuiz","amount","difficulty","a","endpoint","fetch","json","data","results","arr","incorrect_answers","correct_answer","sort","Math","random","GlobalStyle","createGlobalStyle","Tetris","App","useState","loading","setLoading","questions","setQuestions","number","setNumber","userAnswers","setUserAnswers","score","setScore","gameOver","setGameOver","startQuiz","EASY","newQuestions","length","undefined","event","currentTarget","prev","answerObject","TOTAL_QUESTIONS","nextQuestion","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f5fc8aed.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/tetris.544ee49d.jpg\";","import styled from 'styled-components'\r\n\r\nexport const Wrapper = styled.div`\r\n    max-width: 1100px;\r\n    background: #fff;\r\n    border: 3px solid #000;\r\n    padding: 20px;\r\n    box-shadow: 5px 10px 20px rgba(0, 133, 163, 0.25);\r\n    text-align: center;\r\n\r\n    p {\r\n        font-size: 1rem;\r\n    }\r\n`\r\n\r\ninterface ButtonWrapperProps {\r\n    //Correct answer\r\n    correct: boolean;\r\n    //What user clicked. Both passed from QuizCard component\r\n    userClick: boolean;\r\n}\r\n\r\nexport const ButtonWrapper = styled.div<ButtonWrapperProps>`\r\n    transition: all 0.3s ease;\r\n\r\n    :hover {\r\n        opacity: 0.8;\r\n    }\r\n\r\n    button {\r\n        cursor: pointer;\r\n        user-select: none;\r\n        font-size: 0.8rem;\r\n        width: 100%;\r\n        height: 40px;\r\n        margin: 5px 0;\r\n        background: ${({ correct, userClick }) =>\r\n        correct\r\n            ? 'linear-gradient(90deg, #56FFA4, #59BC86)'\r\n            : !correct && userClick\r\n                ? 'linear-gradient(90deg, #FF5656, #C16868)'\r\n                : '#000'};\r\n        border: 3px solid #ffffff;\r\n        box-shadow: 1px 2px 0px rgba(0, 0, 0, 0.1);\r\n        color: #fff;\r\n        text-shadow: 0px 1px 0px rgba(0, 0, 0, 0.25);\r\n      }\r\n`","import React from 'react'\r\n//Types\r\nimport { AnswerObject } from '../App'\r\n//Styles\r\nimport { Wrapper, ButtonWrapper } from './QuestionCard.styles'\r\n\r\ninterface Props {\r\n    question: string;\r\n    answers: string[];\r\n    callback: (event: React.MouseEvent<HTMLButtonElement>) => void;\r\n    userAnswer: AnswerObject | undefined;\r\n    questionNum: number;\r\n    totalQuestions: number;\r\n}\r\n\r\nfunction QuestionCard({\r\n    question,\r\n    answers,\r\n    callback,\r\n    userAnswer,\r\n    questionNum,\r\n    totalQuestions\r\n}: Props) {\r\n    return (\r\n        <Wrapper>\r\n            <p className=\"number\">\r\n                Question: {questionNum} / {totalQuestions}\r\n            </p>\r\n            <p dangerouslySetInnerHTML={{ __html: question }} />\r\n            <div>\r\n                {answers.map(answer => (\r\n                    <ButtonWrapper\r\n                        key={answer}\r\n                        correct={userAnswer?.correctAnswer === answer}\r\n                        userClick={userAnswer?.userAnswer === answer}\r\n                    >\r\n                        <button\r\n                            disabled={!!userAnswer}\r\n                            onClick={callback}\r\n                            value={answer}\r\n                        >\r\n                            <span dangerouslySetInnerHTML={{ __html: answer }} />\r\n                        </button>\r\n                    </ButtonWrapper>\r\n                ))}\r\n            </div>\r\n        </Wrapper>\r\n    )\r\n}\r\n\r\nexport default QuestionCard","import { shuffleArr } from './utils'\r\n\r\nexport type Question = {\r\n    category: string;\r\n    correct_answer: string;\r\n    difficulty: string;\r\n    incorrect_answers: string[];\r\n    question: string;\r\n    type: string;\r\n}\r\n\r\nexport type QuestionState = Question & { answers: string[] }\r\n\r\n\r\nexport enum Difficulty {\r\n    EASY = 'easy',\r\n    MEDIUM = 'medium',\r\n    HARD = 'hard',\r\n}\r\n\r\nexport const fetchQuiz = async (amount: number, difficulty: Difficulty) => {\r\n    const endpoint = `https://opentdb.com/api.php?amount=${amount}&difficulty=${difficulty}&type=multiple`;\r\n    const data = await (await fetch(endpoint)).json();\r\n    return data.results.map((question: Question) => (\r\n        {\r\n            ...question,\r\n            answers: shuffleArr([...question.incorrect_answers, question.correct_answer])\r\n        }\r\n    ))\r\n}","export const shuffleArr = (arr: any[]) =>\r\n    [...arr].sort(() => Math.random() - 0.5)\r\n","import styled, { createGlobalStyle } from 'styled-components'\r\nimport Tetris from './images/tetris.jpg'\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        height: 100%;\r\n    }\r\n\r\n    body {\r\n        background-image: url(${Tetris});\r\n        background-size: cover;\r\n        margin: 0;\r\n        padding: 0 20px;\r\n        display: flex;\r\n        justify-content: center;\r\n    }\r\n    * {\r\n        box-sizing: border-box;\r\n        font-family: 'Roboto Mono', monospace;\r\n    }\r\n`;\r\n\r\nexport const Wrapper = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    > p {\r\n        color: #fff\r\n    }\r\n\r\n    .score {\r\n        color #fff;\r\n        font-size: 2.5rem;\r\n        margin: 0;\r\n        font-family: 'VT323', monospace;\r\n    }\r\n\r\n    h1 {\r\n        font-family: 'VT323', monospace;\r\n        background-image: linear-gradient(180deg, #fff, #B0B0B0);\r\n        background-size: 100%;\r\n        background-clip: text;\r\n        -webkit-background-clip: text;\r\n        -webkit-text-fill-color: transparent;\r\n        -moz-background-clip: text;\r\n        -moz-text-fill-color: transparent;\r\n        filter: drop-shadow(2px 2px #0085a3);\r\n        font-size: 80px;\r\n        font-weight: 400;\r\n        text-align: center;\r\n        margin: 20px\r\n    }\r\n\r\n    .start, .next {\r\n        cursor: pointer;\r\n        background: #fff;\r\n        border: 2px solid #000;\r\n        box-shadow: 0px 5px 10px rgba(0, 0, 0, 0.25);\r\n        height: 40px;\r\n        margin: 20px 0;\r\n        padding: 0 40px;\r\n        box-shadow: 5px 10px 20px rgba(0, 133, 163, 0.25);\r\n    }\r\n\r\n    .start {\r\n        max-width: 200px;\r\n    }\r\n`","import React, { useState } from 'react';\n//Components\nimport QuestionCard from './components/QuestionCard'\n//Util\nimport { fetchQuiz } from './API'\n//Types\nimport { Difficulty, QuestionState } from './API'\n//Styles\nimport { GlobalStyle, Wrapper } from './App.styles'\n\nexport interface AnswerObject {\n\tquestion: string;\n\tuserAnswer: string;\n\tcorrect: boolean;\n\tcorrectAnswer: string;\n}\n\nconst TOTAL_QUESTIONS = 10;\n\nfunction App() {\n\t//State\n\tconst [loading, setLoading] = useState(false);\n\tconst [questions, setQuestions] = useState<QuestionState[]>([]);\n\tconst [number, setNumber] = useState(0);\n\tconst [userAnswers, setUserAnswers] = useState<AnswerObject[]>([]);\n\tconst [score, setScore] = useState(0);\n\tconst [gameOver, setGameOver] = useState(true);\n\n\t//Quiz logic\n\tconst startQuiz = async () => {\n\t\tsetLoading(true);\n\t\tsetGameOver(false);\n\t\t//Fetch questions from API\n\t\tconst newQuestions = await fetchQuiz(TOTAL_QUESTIONS, Difficulty.EASY)\n\t\tsetQuestions(newQuestions);\n\t\tsetScore(0);\n\t\tsetUserAnswers([]);\n\t\tsetNumber(0);\n\t\tsetLoading(false);\n\t};\n\n\tconst checkAnswer = (event: React.MouseEvent<HTMLButtonElement>) => {\n\t\tif (!gameOver) {\n\t\t\t//Answer the user selected\n\t\t\tconst userAnswer = event.currentTarget.value\n\t\t\t//Check if users answer is correct\n\t\t\tconst correct = questions[number].correct_answer === userAnswer\n\t\t\tif (correct) setScore(prev => prev + 1)\n\t\t\t//Save users answer to state\n\t\t\tconst answerObject = {\n\t\t\t\tquestion: questions[number].question,\n\t\t\t\tuserAnswer,\n\t\t\t\tcorrect,\n\t\t\t\tcorrectAnswer: questions[number].correct_answer\n\t\t\t}\n\t\t\tsetUserAnswers(prev => [...prev, answerObject])\n\t\t}\n\t};\n\n\tconst nextQuestion = () => {\n\t\tconst nextQuestion = number + 1;\n\t\t//Check if last question\n\t\tif (nextQuestion === TOTAL_QUESTIONS) {\n\t\t\tsetGameOver(true)\n\t\t} else {\n\t\t\tsetNumber(nextQuestion)\n\t\t}\n\t};\n\n\treturn (\n\t\t<>\n\t\t\t<GlobalStyle />\n\t\t\t<Wrapper>\n\t\t\t\t<h1>QU1Z G4M3</h1>\n\t\t\t\t{/* Display start button only if game hasn't started or is over */}\n\t\t\t\t{gameOver || userAnswers.length === TOTAL_QUESTIONS ? (\n\t\t\t\t\t<button className='start' onClick={startQuiz}>\n\t\t\t\t\t\tStart\n\t\t\t\t\t</button>) : null\n\t\t\t\t}\n\t\t\t\t{/* Only display score when game is on */}\n\t\t\t\t{!gameOver && <p className='score'>Score: {score}</p>}\n\t\t\t\t{loading && <p>Loading Questions...</p>}\n\t\t\t\t{!loading && !gameOver && (\n\t\t\t\t\t<QuestionCard\n\t\t\t\t\t\tquestionNum={number + 1}\n\t\t\t\t\t\ttotalQuestions={TOTAL_QUESTIONS}\n\t\t\t\t\t\tquestion={questions[number].question}\n\t\t\t\t\t\tanswers={questions[number].answers}\n\t\t\t\t\t\tuserAnswer={userAnswers ? userAnswers[number] : undefined}\n\t\t\t\t\t\tcallback={checkAnswer}\n\t\t\t\t\t/>)\n\t\t\t\t}\n\t\t\t\t{/* Display next question button while game is running and the user has answered the question */}\n\t\t\t\t{!gameOver &&\n\t\t\t\t\t!loading &&\n\t\t\t\t\tuserAnswers.length === number + 1 &&\n\t\t\t\t\tnumber !== TOTAL_QUESTIONS - 1 && (\n\t\t\t\t\t\t<button className=\"next\" onClick={nextQuestion}>Next Question</button>\n\t\t\t\t\t)}\n\t\t\t</Wrapper>\n\t\t</>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);"],"sourceRoot":""}